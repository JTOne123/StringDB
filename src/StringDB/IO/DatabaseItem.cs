using System;
using System.Collections.Generic;
using System.Linq;

namespace StringDB.IO
{
	public struct DatabaseItem : IEquatable<DatabaseItem>
	{
		public byte[] Key;

		public long DataPosition;

		/// <summary>
		/// If this is true, there are no more values left to read and this item itself isn't a readable value.
		/// </summary>
		public bool EndOfItems;

		/// <inheritdoc />
		public override bool Equals(object obj)
		{
			if (!(obj is DatabaseItem other))
			{
				return false;
			}

			return Equals(other);
		}

		public static bool operator ==(DatabaseItem left, DatabaseItem right) => left.Equals(right);

		public static bool operator !=(DatabaseItem left, DatabaseItem right) => !(left == right);

		/// <inheritdoc />
		public bool Equals(DatabaseItem other)
		{
			return DataPosition == other.DataPosition
				&& EndOfItems == other.EndOfItems
				&& Key.SequenceEqual(other.Key);
		}

		// autogenerated
		/// <inheritdoc />
		public override int GetHashCode()
		{
			var hashCode = -551433181;
			hashCode = hashCode * -1521134295 + EqualityComparer<byte[]>.Default.GetHashCode(Key);
			hashCode = hashCode * -1521134295 + DataPosition.GetHashCode();
			hashCode = hashCode * -1521134295 + EndOfItems.GetHashCode();
			return hashCode;
		}
	}
}